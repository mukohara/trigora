#! /bin/bash

usage(){
	echo "Usage: trigora [OPTION]... ACTION
OPTION:
	--help
ACTION:
	start        enable system.
	stop         disable system."
}


improper(){
	echo -e "trigora: unrecognized argument.\\nTry 'trigora --help' for more information."
}

if [ $# -ne 1 ]; then
	improper
	exit 1
fi

if [ $1 == "start" ]
then

	# 履歴収集部の収集先ログファイル作成
	sudo touch /var/log/fuse-watch.log
	sudo chmod o+w /var/log/fuse-watch.log
	echo "Log File created."

	# proc.stat作成
	# touch ../tmp/proc.stat
	# echo "proc.stat create."

	# 履歴収集部起動
	../src/collector/collector /fuse-watch
	# echo "collector 1" >> ../tmp/proc.stat
	echo "Collecter start."

	# ホームディレクトリのシンボリックリンク調整
	sudo mv /home/mukohara /home/mukohara.can
	sudo ln -s /fuse-watch/home/mukohara.can /home/mukohara
	# echo "symlink 1" >> ../tmp/proc.stat
	echo "Symlink created."

	# Redis起動
	sudo redis-server /etc/redis/redis.conf
	# echo "redis 1" >> ../tmp/proc.stat
	echo "Redis start."

	# 履歴変換部起動
	python ../src/converter/converter.py /var/log/fuse-watch.log converter.pid &
	# echo "converter 1" >> ../tmp/proc.stat
	echo "Converter start."

	# 実行部起動
	python ../src/executor/executor.py ../examples/action.example.conf executor.pid &
	# echo "executor 1" >> ../tmp/proc.stat
	echo "Executor start."
elif [ $1 == "stop" ]
then
	# シンボリックリンク解除
	# SYMLINK_STAT=`cat ../tmp/proc.stat | grep symlink`
	# if [ ${SYMLINK_STAT: -1} -eq 1 ]; then
	if [ -L /home/mukohara ]; then
		sudo unlink /home/mukohara
		sudo mv /home/mukohara.can /home/mukohara
		# sed -i "s/symlink 1/symlink 0/g" ../tmp/proc.stat
		echo "Symlink deleted."
	fi
	# fi

	# 履歴変換部停止
	# CONVERTER_PID="`ps -auxf | grep ../src/converter | awk '{print $2}'`"
	# kill $CONVERTER_PID
	# echo "$CONVERTER_PID"
	# echo "Converter stop."
	#
	# # 実行部停止
	# EXECUTOR_PID="`ps -auxf | grep ../src/executor | awk '{print $2}'`"
	# kill $EXECUTOR_PID
	# echo "Executor stop."

	# 履歴変換部，実行部停止
	# CVT_EXC_STAT=`cat ../tmp/proc.stat | grep converter`
	# if [ ${CVT_EXC_STAT: -1} -eq 1 ]; then
	# 	while read LINE
	# 	do
	# 		kill $LINE
	# 	done < ../tmp/proc.pid
	# 	echo "Converter stop."
	# 	echo "Executor stop."
	# 	sed -i "s/converter 1/converter 0/g" ../tmp/proc.stat
	# 	sed -i "s/executor 1/executor 0/g" ../tmp/proc.stat
	# fi

	# 履歴変換部，実行部停止
	if [ -e ../tmp/converter.pid ]; then
		CONVERTER_PID="`cat ../tmp/converter.pid`"
		kill $CONVERTER_PID
	 	echo "Converter stop."
	fi

	if [ -e ../tmp/executor.pid ]; then
		EXECUTOR_PID="`cat ../tmp/executor.pid`"
		kill $EXECUTOR_PID
	 	echo "Executor stop."
	fi

	# proc.pid削除
	# PROC_PID_STAT=`cat ../tmp/proc.stat | grep proc.pid`
	# if [ ${PROC_PID_STAT: -1} -eq 1 ]; then
	# 	rm ../tmp/proc.pid
	# 	echo "Remove proc.pid."
	# 	sed -i "s/proc.pid 1/proc.pid 0/g" ../tmp/proc.stat
	# fi

	# Redis停止
	# REDIS_STAT=`cat ../tmp/proc.stat | grep redis`
	# if [ ${REDIS_STAT: -1} -eq 1 ]; then
	if [ -e /var/run/redis/redis-server.pid ]; then
		sudo pkill redis-server
		echo "Redis stop."
	fi
	# sed -i "s/redis 1/redis 0/g" ../tmp/proc.stat
	# fi

	# ファイルシステム(履歴収集部)アンマウント
	# COLLECTOR_STAT=`cat ../tmp/proc.stat | grep collector`
	# if [ ${COLLECTOR_STAT: -1} -eq 1 ]; then
	RSLT=`mount | grep collector`
	if [ -n "$RSLT" ]; then
		sudo umount /fuse-watch
		if [ $? -ne 0 ]; then
			exit 1;
		fi
		echo "Collector stop."
    	# sed -i "s/collector 1/collector 0/g" ../tmp/proc.stat
	fi

	# proc.stat削除
	# rm ../tmp/proc.stat
	# echo "Remove proc.stat."

elif [ $1 == "--help" ]
then
	usage
else
	improper
fi
